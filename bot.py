from aiogram import Bot, Dispatcher, html, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from apscheduler.schedulers.asyncio import AsyncIOScheduler
import datetime
import random

from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from dotenv import load_dotenv
import os

from users_markups import *
from database import DataBase
from users_status import *
from text_converter import *

load_dotenv()
TOKEN = os.getenv('TOKEN')
TAXI_CHAT = os.getenv('TAXI_CHATT')
ORDERS = os.getenv("ORDERS")
dp = Dispatcher()
dataBase = DataBase('taxi.db')
current_orders ={}
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))


async def interval_task(bot: Bot, db: DataBase):
    drivers = db.showAll('drivers')
    report = '–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n'
    total_orders = 0
    for driver in drivers:
        name = driver[2]
        today_orders = driver[6]
        if today_orders != 0:
            report += f"{name} - {today_orders} –∑–∞–∫–∞–∑–æ–≤\n"
            total_orders += today_orders
            await bot.send_message(driver[0], f"–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{name} - {today_orders} –∑–∞–∫–∞–∑–æ–≤\n")
    report += f'–ò—Ç–æ–≥: {total_orders}'
    db.nullColmn('drivers', 'count_today')
    await bot.send_message(TAXI_CHAT, report)


async def main() -> None:
    scheduler = AsyncIOScheduler(timezone = 'Europe/Moscow')
    scheduler.add_job(interval_task, trigger='cron', hour = 18, kwargs={'bot':bot, 'db': dataBase})
    scheduler.start()
    await dp.start_polling(bot)


@dp.message(CommandStart())
async def start_message(message: Message, state: FSMContext):

    await state.clear()
    count = dataBase.OnlineCount()
    user_name = message.from_user.first_name

    greetings = [
        f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{user_name}</b>! üöï –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞.\n–í –Ω–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ {count} –≤–æ–¥–∏—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –≤—ã–µ—Ö–∞—Ç—å –∫ —Ç–µ–±–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{user_name}</b>! üöï –¢—ã –≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏?\n–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É –Ω–∞—Å {count} –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏, –∏ –º—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞.",
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, <b>{user_name}</b>! üöï –ù–∞—à —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ.\n–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É –Ω–∞—Å {count} –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏, –∏ –º—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫ —Ç–µ–±–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{user_name}</b>! üöï –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–µ.\n–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É –Ω–∞—Å {count} –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏, –∏ –º—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –±—ã—Å—Ç—Ä–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ.",
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{user_name}</b>! üöï –¢—ã –≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏? –ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É –Ω–∞—Å {count} –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏, –∏ –º—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫ —Ç–µ–±–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
    ]
    send_message = random.choice(greetings)
    user_id = message.from_user.id
    
    if dataBase.isExist('users', 'id', user_id):
        await message.answer(text=send_message, reply_markup=start_markup.as_markup())
    else:
        send_message = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, <b>{user_name}</b>, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–µ.\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
        await message.answer(text=send_message)
        await state.set_state(UserRegState.getTel)



@dp.callback_query(MyCallback.filter(F.action == 'profile'))
async def get_profile(call: CallbackQuery):
    id = call.from_user.id

    if dataBase.isExist('drivers', 'id', id):
        row = dataBase.getRow('drivers', id, 'id', '*')
        send_message = driver_info(row)
    else:
        row =dataBase.getRow('users',id, 'id', '*')
        send_message = text_profile(row) 
    
    await call.message.delete_reply_markup()
    await call.message.answer(send_message, reply_markup= start_markup.as_markup())


@dp.message(Command('driver'))
async def start_driver_register(message: Message, state: FSMContext):
    await state.update_data(driver_id=message.from_user.id)
    send_message = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû"
    await message.answer(text=send_message)
    await state.set_state(DriverRegState.tel)

@dp.message(Command('info'))
async def info_drivers(message: Message, state: FSMContext):
    all_drivers = dataBase.showAll('drivers')
    count = 0
    for row in all_drivers:
        print(row)
        if row[-1] == 1:
            send_message = f"{row[2]} - {row[1]}"
            count += 1
            await message.answer(text= send_message)
    await message.answer(f'–í—Å–µ–≥–æ: {count} –≤–æ–¥–∏—Ç–µ–ª–µ–π –û–Ω–ª–∞–π–Ω.')

@dp.message(Command('status'))
async def change_status(message: Message, state: FSMContext):
    
    id = message.from_user.id
    if dataBase.isExist('drivers', 'id', id):
        status = dataBase.getRow('drivers', id, 'id', 'is_online')[0]
        status = '–û–ù–õ–ê–ô–ù' if status==1 else '–û–§–õ–ê–ô–ù'
        await message.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å {status}.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ", reply_markup= drivers_status_markup)



@dp.message(UserRegState.getTel)
async def new_user(message: Message, state: FSMContext):
    user_id = message.from_user.id
    tel_num = message.text
    if is_valid_phone_number(tel_num):
        dataBase.addRow('users', user_id, tel_num, 0)
        await state.clear()
        send_message = '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏! üöï'
        await message.answer(text=send_message, reply_markup=start_markup.as_markup())
    else:
        send_message = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üìû'
        await message.answer(text=send_message)


@dp.callback_query(MyCallback.filter(F.action == 'makeOrder'))
async def make_order(call: CallbackQuery, state: FSMContext):

    send_message = '–û—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å? üìç'
    await call.message.edit_text(text=send_message)
    await state.set_state(OrderState.start)


@dp.message(F.text, OrderState.start)
async def start_point(message: Message, state: FSMContext):
    await state.update_data(start=message.text)
    send_message = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üó∫Ô∏è'
    await message.answer(text=send_message, reply_markup=getPos_markup)
    await state.set_state(OrderState.location)



@dp.message(F.location, OrderState.location)
async def start_location(message: Message, state: FSMContext):
    await state.update_data(location=message.location)
    send_message = "–ö—É–¥–∞ –≤–∞—Å –æ—Ç–≤–µ–∑—Ç–∏? üõ§Ô∏è"
    await message.answer(text=send_message, reply_markup=ReplyKeyboardRemove())
    await state.set_state(OrderState.finish)


@dp.message(OrderState.finish)
async def get_adress(message: Message, state: FSMContext):
    await state.update_data(finish = message.text)
    data = await state.get_data()
    send_message = confirm(data)
    await message.answer(send_message, reply_markup=confirm_markup.as_markup())

@dp.callback_query(MyCallback.filter(F.action == 'reject'))
async def reject_order(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
    await state.clear()

@dp.callback_query(MyCallback.filter(F.action == 'confirm'))
async def confirm_order(call: CallbackQuery, state: FSMContext):
    pas_id = call.from_user.id

    chat_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text= '–í–∑—è—Ç—å –∑–∞–∫–∞–∑', callback_data=TaxiCallback(id= pas_id, action='newOrder').pack())
    ]])
    order_message = await bot.send_message(TAXI_CHAT, text=call.message.text, reply_markup= chat_markup)

    
    user_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text= '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ ‚ùå', callback_data= DelMessageCallback(message_id= order_message.message_id, chat_id=TAXI_CHAT).pack())
    ]])
    await call.message.edit_reply_markup()
    del_message = await call.message.answer('–ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è...üîé', reply_markup=user_markup)
    current_orders[pas_id] = (await state.get_data(), del_message.message_id)

    await state.clear()


@dp.callback_query(TaxiCallback.filter(F.action == 'newOrder'))
async def take_order(call: CallbackQuery, state: FSMContext):
    driver_id = int(call.from_user.id)
    if dataBase.isExist('drivers', 'id', driver_id):
        await call.answer('–í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑. üöï –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞', show_alert=True)
        pas_id = int(call.data.split(':')[1])
        data = current_orders[pas_id][0]
        user_mes_id = current_orders[pas_id][1]

        location = data['location']
        latitude = location.latitude
        longitude = location.longitude

        await call.message.delete()     #–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞
        driver_info = dataBase.getRow('drivers', driver_id, 'id', '*')
        message_to_user = driver_info_message(driver_info)
        await bot.edit_message_text(text= message_to_user, chat_id=pas_id, message_id=user_mes_id)

        order_message = html.bold('–í–∞—à –ó–∞–∫–∞–∑: \n') + confirm(data) + html.italic('\n–¢–µ–ª–µ—Ñ–æ–Ω: ') + html.bold(str(dataBase.getTelNum('users', 'tel', pas_id)[0]))

        driver_markup = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text= '–ù–∞ –º–µ—Å—Ç–µ üìç', callback_data=TaxiCallback(id=pas_id, action='–ü–æ–¥—ä–µ—Ö–∞–ª').pack())
        ]])

        await bot.send_location(call.from_user.id, latitude=latitude, longitude=longitude)
        await bot.send_message(chat_id= driver_id, text = order_message, reply_markup= driver_markup)
        await bot.send_message(chat_id= ORDERS, text =  order_message +'\n'+message_to_user)

    else:
        await call.answer('–í—ã –Ω–µ –≤–æ–¥–∏—Ç–µ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É. üöî', show_alert=True)


@dp.callback_query(TaxiCallback.filter(F.action == '–ü–æ–¥—ä–µ—Ö–∞–ª'))
async def arrived(call: CallbackQuery, state: FSMContext):
    driver_id = int(call.from_user.id)
    pas_id = int(call.data.split(':')[1])

    await bot.send_message(pas_id, '–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–µ—Ö–∞–ª, –º–æ–∂–µ—Ç–µ –≤—ã—Ö–æ–¥–∏—Ç—å. üöó –•–æ—Ä–æ—à–µ–π –ø–æ–µ–∑–¥–∫–∏!')
    driver_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚úÖ', callback_data=TaxiCallback(id = pas_id, action= '–∑–∞–≤–µ—Ä—à–∏—Ç—å').pack())
    ]])
    await call.message.edit_reply_markup(reply_markup=driver_markup)


@dp.callback_query(TaxiCallback.filter(F.action == '–∑–∞–≤–µ—Ä—à–∏—Ç—å'))
async def finish_trip(call: CallbackQuery, state: FSMContext):
    driver_id = int(call.from_user.id)
    pas_id = int(call.data.split(':')[1])

    dataBase.incCell('drivers', driver_id, 'count', 'count_today')
    dataBase.incCell('users', pas_id, 'count')

    drivers_count = dataBase.getRow('drivers', driver_id, 'id', 'count, count_today')

    await bot.send_message(pas_id, '–í—ã –ø—Ä–∏–µ—Ö–∞–ª–∏! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üöï', reply_markup= finish_markup)
    await call.message.delete_reply_markup()
    await call.message.answer(f'–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–µ–∑–¥–∫—É. ‚úÖ\n–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: \n–í—Å–µ–≥–æ: {drivers_count[0]}\n–°–µ–≥–æ–¥–Ω—è: {drivers_count[1]}')
    await state.clear()
    current_orders.pop(pas_id)




@dp.callback_query(DelMessageCallback.filter())
async def reject_serch(call: CallbackQuery, state: FSMContext):
    pas_id = call.from_user.id
    data = call.data.split(':')
    del_mes_id = data[1]
    del_chat_id = data[2]
    await bot.delete_message(del_chat_id, del_mes_id)
    await call.message.edit_text('–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. ‚ùå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start')
    current_orders.pop(pas_id)
    await state.clear()








@dp.message(DriverRegState.tel)
async def driversTelNum(message:Message, state: FSMContext):
    tel_num = message.text
    if is_valid_phone_number(tel_num):
        await state.update_data(tel = tel_num)
        await state.set_state(DriverRegState.name)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–û')
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')

@dp.message(DriverRegState.name)
async def driversName(message: Message, state: FSMContext):
    name = message.text
    await state.update_data(name = name)
    await state.set_state(DriverRegState.auto_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –º–æ–∂–Ω–æ —Ç–∞–∫ –∂–µ —É–∫–∞–∑–∞—Ç—å —Ü–≤–µ—Ç, —á—Ç–æ–±—ã –ø–∞—Å—Å–∞–∂–∏—Ä—ã –º–æ–≥–ª–∏ –ª–µ–≥—á–µ –Ω–∞–π—Ç–∏ –≤–∞—Å.')

@dp.message(DriverRegState.auto_name)
async def driversAutoName(message: Message, state: FSMContext):
    auto_name = message.text
    await state.update_data(auto_name = auto_name)
    await state.set_state(DriverRegState.auto_num)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ì–û–°–¢ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã, –º–æ–∂–Ω–æ –±–µ–∑ –±—É–∫–≤.")

@dp.message(DriverRegState.auto_num)
async def driversAutoNum(message: Message, state: FSMContext):
    auto_num = message.text
    await state.update_data(auto_num = auto_num)
    await state.set_state(DriverRegState.confirm)

    send_message = driver_confirm_reg(await state.get_data())
    markups = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text= '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=MyCallback(action='confirmreg').pack()),
        InlineKeyboardButton(text= '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=MyCallback(action='reject').pack())
    ]])

    await message.answer(text= send_message, reply_markup=markups)

@dp.callback_query(DriverRegState.confirm, MyCallback.filter(F.action == 'confirmreg'))
async def driversAddBase(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    dataBase.addRow('drivers', data['driver_id'], data['tel'], data['name'], data['auto_name'], data['auto_num'], 0, 0, 0)
    await call.message.edit_text('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ —á–∞—Ç–µ. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –º–µ–Ω—è—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏–ª–∏ –Ω–∞–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /status', reply_markup= drivers_status_markup)
    await state.clear()

@dp.callback_query(MyCallback.filter(F.action == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'))
async def begin_work(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í—ã –Ω–∞—á–∞–ª–∏ —Å–º–µ–Ω—É, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞–∂–º–∏—Ç–µ /status")
    id = call.from_user.id
    dataBase.makeOnline(id)

@dp.callback_query(MyCallback.filter(F.action == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É'))
async def finish_work(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–º–µ–Ω—É. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞–∂–º–∏—Ç–µ /status")
    id = call.from_user.id
    dataBase.makeOfline(id)
    







async def f(bot: Bot):
    await bot.send_message(TAXI_CHAT, 'HI')




if __name__ == "__main__":
    asyncio.run(main())
